{"version":3,"sources":["components/AddCategory.js","GifGridItem.js","helpers/getGifs.js","components/GetGrid.js","hooks/useFetchHook.js","GifExpertApp.js","index.js"],"names":["AddCategory","ingresarCategorias","useState","inputValue","setInputValue","onSubmit","e","preventDefault","length","listaCategorias","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","gif","images","downsized_medium","GetGrid","loading","state","setState","useEffect","then","imgs","useFetchHook","img","GifExpertApp","categorias","setCategorias","cat","ReactDOM","render","document","querySelector"],"mappings":"mMA4BeA,EAzBK,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,mBAAyB,EACVC,mBAAS,IADC,mBACvCC,EADuC,KAC3BC,EAD2B,KAc9C,OACE,sBAAMC,SARe,SAACC,GACtBA,EAAEC,iBACEJ,EAAWK,OAAS,IACtBP,GAAmB,SAACQ,GAAD,OAAsBN,GAAtB,mBAAqCM,OACxDL,EAAc,MAIhB,SACE,uBAAOM,KAAK,OAAOC,MAAOR,EAAYS,SAbnB,SAACN,GACtBF,EAAcE,EAAEO,OAAOF,a,QCJdG,G,MAAc,SAAC,GAAuB,EAArBC,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IACvC,OACE,sBAAKC,UAAU,2CAAf,UACE,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAIA,S,uBCPGK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbN,EADa,iDAEyBO,UAAUF,GAFnC,+DAGAG,MAAMR,GAHN,cAGbS,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIC,cAAN,aAAE,EAAYC,iBAAiBhB,QATnB,kBAaZY,GAbY,4CAAH,sDCIPK,EAAU,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EACdpB,mBAAS,CACjC0B,KAAM,GACNO,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAexC,OATAC,qBAAU,WACRjB,EAAQC,GAAUiB,MAAK,SAACC,GAAD,OACrBH,EAAS,CACPT,KAAMY,EACNL,SAAS,SAGZ,CAACb,IAEGc,EDb2BK,CAAanB,GAAjCU,EADyB,EAC/BJ,KAAcO,EADiB,EACjBA,QAEtB,OACE,qCACE,sBAAKjB,UAAU,QAAf,UACE,6BAAKI,IACL,sBAAMJ,UAAU,QAAhB,SACGiB,EAAU,cAAgB,sBAG/B,uBACA,uBACA,qBAAKjB,UAAU,WAAf,SACGc,EAAOxB,OAAS,EACfwB,EAAOF,KAAI,SAACY,GAAD,OAAS,cAAC,EAAD,eAA8BA,GAAZA,EAAI3B,OAE1C,yEEjBG4B,EAAe,WAAO,IAAD,EACIzC,mBAAS,CAAC,eADd,mBACzB0C,EADyB,KACbC,EADa,KAEhC,OACE,qCACE,8CACA,cAAC,EAAD,CAAa5C,mBAAoB4C,IACjC,uBACA,6BACGD,EAAWd,KAAI,SAACgB,GAAD,OACd,cAAC,EAAD,CAAmBxB,SAAUwB,GAAfA,Y,MCRxBC,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,cAAc,W","file":"static/js/main.2a89d32c.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst AddCategory = ({ ingresarCategorias }) => {\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const handleOnChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleOnSubmit = (e) => {\n    e.preventDefault();\n    if (inputValue.length > 0) {\n      ingresarCategorias((listaCategorias) => [inputValue, ...listaCategorias]);\n      setInputValue(\"\");\n    }\n  };\n  return (\n    <form onSubmit={handleOnSubmit}>\n      <input type=\"text\" value={inputValue} onChange={handleOnChange} />\n    </form>\n  );\n};\n\nAddCategory.propTypes = {\n  ingresarCategorias: PropTypes.func.isRequired,\n};\n\nexport default AddCategory;\n","import React from \"react\";\nimport 'animate.css';\n\nexport const GifGridItem = ({ id, title, url }) => {\n  return (\n    <div className='card animate__animated animate__bounceIn'>\n      <img src={url} alt={title} />\n      <p>{title}</p>\n    </div>\n  );\n};\n","export const getGifs = async (category) => {\n    const url =\n      `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=wSIwWLjTCJIyw5wjTro1p52xnRTuBguo`;\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n    const gifs = data.map((gif) => {\n      return {\n        id: gif.id,\n        title: gif.title,\n        url: gif.images?.downsized_medium.url,\n      };\n    });\n\n    return gifs;\n  };","import React from \"react\";\nimport { GifGridItem } from \"../GifGridItem\";\nimport { useFetchHook } from \"../hooks/useFetchHook\";\n\nexport const GetGrid = ({ category }) => {\n  const { data: images, loading } = useFetchHook(category);\n\n  return (\n    <>\n      <div className=\"fondo\">\n        <h3>{category}</h3>\n        <span className=\"carga\">\n          {loading ? \"...Cargando\" : \"Datos cargados\"}\n        </span>\n      </div>\n      <br />\n      <br />\n      <div className=\"cardGrid\">\n        {images.length > 0 ? (\n          images.map((img) => <GifGridItem key={img.id} {...img} />)\n        ) : (\n          <span>Â¡Ups! no se encontro gifs...</span>\n        )}\n      </div>\n    </>\n  );\n};\n","import { useState, useEffect } from \"react\";\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchHook = (category) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    getGifs(category).then((imgs) =>\n      setState({\n        data: imgs,\n        loading: false,\n      })\n    );\n  }, [category]);\n\n  return state;\n};\n","import React, { useState } from \"react\";\nimport AddCategory from \"./components/AddCategory\";\nimport { GetGrid } from \"./components/GetGrid\";\n\nexport const GifExpertApp = () => {\n  const [categorias, setCategorias] = useState([\"Death Note\"]);\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory ingresarCategorias={setCategorias} />\n      <hr />\n      <ol>\n        {categorias.map((cat) => (\n          <GetGrid key={cat} category={cat} />\n        ))}\n      </ol>\n    </>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { GifExpertApp } from \"./GifExpertApp\";\nimport \"./index.css\";\n\nReactDOM.render(<GifExpertApp />, document.querySelector(\"#app\"));\n"],"sourceRoot":""}